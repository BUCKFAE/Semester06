// Julian Schubert
// Philipp Wahl
// Timo Schröder

Wir bestimmen die berechnete Funktion von f6(x):

Für x kleiner gleich null gibt die Funktion 0 zurück.

Für x größer null:
Zunächst wird y auf 0 initialisiert.

In jedem Schleifendurchlauf:
x wird um 2y - 1 verringert, und y um 1 erhöht.

1. Durchlauf: x = x, y = 0:
x = x - 2 * 0 - 1 = x - 1
y = y + 1

2. Durchlauf: x = x - 1, y = 1
x = x - 1 - 2 * 1 - 1 = x - 4
y = 1 + 1 = 2

3. Durchlauf x = x - 4, y = 2
x = x - 4 - 2 * 2 - 1 = x - 9
y = 2 + 1 = 3

4. Durchlauf x = x - 9, y = 3
x = x - 9 - 2 * 3 - 1 = x - 16
y = 3 + 1 = 4

y ist also die größte Zahl für die gilt:
x - summe_{i = 0}^{y} 2y - 1 > 0

Insgesamt ist die berechnete Funktion also:
f6(x) = Die größte natürliche Zahl y, für die gilt:
x - summe_{i = 0}^{y} 2y - 1 > 0

Wir können nun mit folständiger Induktion zeigen, dass das Ergebnis dieser
Summe gleich n^2 ist. 

Wir zeigen das für die summe von i = 1 bis n 2i - 1 gleich n^2 gilt:

Induktionsvoraussetzung: sum_{i = 1}^n 2i - 1 = n^2

Induktionsanfang: n = 0
0^2 = 0, summe ist ebenfalls null (da der Start i = 1 nach dem Ende n=0 liegt)

Indunktionsschrit: Die summe sei gleich n^2 für ein gegebenes n
sum_{i=1}^{n + 1} 2i - 1 = (2 * (n + 1)) - 1 + sum_{i = 1} 2i - 1
Durch IA:
= (2 * (n + 1)) - 1 + n^2 = 2n + 1 + n^2 = (n + 1)^2

Die Funktion f6 berechnet also die aufgerundete Wurzelfunktion


Diese haben wir ebenfalls mit dem folgenden Python-Program validiert:

import math

def f6(x):
    y = 0
    while x > 0:
        x = x - y - y - 1
        y = y + 1
    return y

def predict_f6(x):
    y = 0
    while x - sum([(2 * i) + 1 for i in range(0, y)]) > 0:
        y += 1
    return y

def predict_f6_2(x):
    return math.ceil(math.sqrt(x)) if x > 0 else 0

print(''.join("{}: {} {} {}\n".format(i, f6(i), predict_f6(i), predict_f6_2(i)) for i in range(0, 200)))
assert all([f6(x) == predict_f6(x) == predict_f6_2(x) for x in range(0, 200)])