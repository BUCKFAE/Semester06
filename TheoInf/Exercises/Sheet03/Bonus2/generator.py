open('primes.py', 'w').write(''.join([("def isPrime(x):\n\n\t# Initalizing the result variable\n\t[result] = [0]\n\n" + ''.join([''.join(["\t# Checks if the given number is equal to {}\n\tif (x == {}):\n\t\t# As the number {} is {}a prime number we return {}\n\t\tresult = {}\n\n" .format(i, i, i, "not " if res == 0 else "", res, res) for res in [0 if i < 2 or any([i % j == 0 for j in range(2, int(i ** (1 / 2) + 1))]) else 1]]) for i in range(s)]) + "\t# We don't know yet if the number is a prime, so we determine it\n\tif (x > {}):\n".format(s - 1) + "\t\tresult = prim(x)\n\n\t# Returning the result\n\treturn result\n\n" + "def prim(x):\n\n\t# Default: x is not a prime\n\tret = 0\n\n\t# 0 and 1 are not prime\n\tif (x > 1):\n\t\t# Calling the recursive function to dertime if x is a prime\n\t\tret = recPrim(x, 2)\n\t\n\treturn ret\n\ndef recPrim(x, curr):\n\n\t# Default: x is a prime\n\tret = 1\n\n\t# Exiting if curr == x\n\tif(curr < x):\n\t\t# If (x // curr) * curr == x\n\t\tif (prodZ(divZ(x, curr), curr) == x):\n\t\t\t# x is not a prime\n\t\t\tret = 0\n\t\telse:\n\t\t\t# Checking the next number\n\t\t\tret = recPrim(x, (curr + 1))\n\n\treturn ret\n\t\n\ndef prodZ(x, y):\n\t# Calculates x * y using recursion instead of loops\n\t[ret] = [0]\n\tif (x < y):\n\t\tret = prodZ(y, x)\n\telse:\n\t\tif (y != 0):\n\t\t\tret = (x + prodZ(x, (y - 1)))\n\t\n\treturn ret\n\ndef divZ(x, y):\n\t# Calculates x // y using recursion instead of loops\n\t[ret] = [0]\n\tif (x < y):\n\t\tret = 0\n\telse:\n\t\tret =  (1 + divZ((x - y), y))\n\treturn ret\n")for s in [int(input("Enter amount of numbers to precalculate: "))]]).replace("\t", "    "))
